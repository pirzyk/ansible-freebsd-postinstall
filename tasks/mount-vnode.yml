---

- name: "mount-{{ _fp_mount_task }}: Debug fp_mount_vnode_debug={{ fp_mount_vnode_debug }}"
  vars:
    msg: |-
      _fp_mount_task: {{ _fp_mount_task }}
      _fp_mount_fstype_default: {{ _fp_mount_fstype_default }}
      _fp_mount_points_create: {{ _fp_mount_points_create }}
      _fp_mount_entries:
        {{ _fp_mount_entries|to_nice_yaml(indent=2)|indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: fp_mount_vnode_debug|default(false)|bool

# mounted - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "mount-{{ _fp_mount_task }}: Create mount points"
  ansible.builtin.file:
    state: directory
    path: "{{ item.mount }}"
    mode: "{{ item.dirmode|default('0755') }}"
  loop: "{{ fp_mount_entries }}"
  when:
    - _fp_mount_points_create|bool  # Note 2.
    - item.state|default("mounted") == "mounted"

- name: "mount-{{ _fp_mount_task }}: Attach memory disks"
  ansible.builtin.include_tasks:
    file: fn/mdconfig-attach-disk.yml
  loop: "{{ _fp_mount_entries }}"
  when: item.state|default("mounted") == "mounted"

- name: "mount-{{ _fp_mount_task }}: Debug attach memory disks"
  ansible.builtin.debug:
    var: al_mdconfig_devs
  when: _fp_mount_debug|bool

# TODO: Sanity al_mdconfig_devs[_vnode] is defined; not in check-mode

- name: "mount-{{ _fp_mount_task }}: Mount"
  ansible.posix.mount:
    src: "/dev/md{{ al_mdconfig_devs[_vnode]['unit'] }}{{ item.partition|default('') }}"
    path: "{{ item.mount }}"  # Note 2.
    fstype: "{{ item.fstype|default(_fp_mount_fstype_default) }}"
    state: mounted
    fstab: /tmp/tmp.fstab  # Note 1.
  loop: "{{ _fp_mount_entries }}"
  register: result
  when:
    - al_mdconfig_devs[_vnode] is defined
    - item.state|default("mounted") == "mounted"
  vars:
    _vnode: "{{ item[_fp_mount_task] }}"

- name: "mount-{{ _fp_mount_task }}: Debug mount"
  ansible.builtin.debug:
    var: result
  when: _fp_mount_debug|bool

# unmounted - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "mount-{{ _fp_mount_task }}: Unmount"
  ansible.posix.mount:
    path: "{{ item.mount }}"  # Note 2.
    state: unmounted
    fstab: /tmp/tmp.fstab  # Note 1.
  loop: "{{ _fp_mount_entries }}"
  register: result
  when: item.state|default("mounted") == "unmounted"

- name: "mount-{{ _fp_mount_task }}: Debug unmount"
  ansible.builtin.debug:
    var: result
  when: _fp_mount_debug|bool

- name: "mount-{{ _fp_mount_task }}: Detach memory disks"
  ansible.builtin.include_tasks:
    file: fn/mdconfig-detach-disk.yml
  loop: "{{ _fp_mount_entries }}"
  when: item.state|default("mounted") == "unmounted"

- name: "mount-{{ _fp_mount_task }}: Debug detach memory disks"
  ansible.builtin.debug:
    var: al_mdconfig_devs
  when: _fp_mount_debug|bool

# NOTES
# Note 1: It's not possible to mount a device without touching fstab. Temporary fstab is a
# workaround.
# https://github.com/ansible-collections/ansible.posix/issues/84#issuecomment-742420345
# Note 2: Ansible module *mount* will create/remove non-existent mountpoint

# TODO: Permanent mount entry in fstab
# state: present, absent (See ansible.posix.mount parameter *state*)
# See /etc/rc.d/mdconfig2
# Ex: mdconfig_md0="-t vnode -f /usr/local/data/vdisks/devltd.net"
# https://forums.freebsd.org/threads/mounting-vnode-backed-memory-disks-at-startup.21002/

# EOF
...
