---

- name: "passwords: Debug (fp_passwords_debug={{ fp_passwords_debug }})"
  when: fp_passwords_debug | bool
  tags: fp_passwords_debug
  vars:
    msg: |-
      fp_passwords_debug_classified: {{ fp_passwords_debug_classified }}
      fp_passwords_fail_gracefully: {{ fp_passwords_fail_gracefully }}
      fp_passwords_update_password: {{ fp_passwords_update_password }}
      fp_users_conf:
      {% if fp_passwords_debug_classified | bool %}
        {{ fp_users_conf | d([]) | to_nice_yaml(indent=2) | indent(2) }}
      {% else %}
      {% for user in fp_users_conf | d([]) %}
        - userpass: ************
      {% for k,v in user.items() %}
      {% if k not in ['userpass'] %}
          {{ k }}: {{ v }}
      {% endif %}
      {% endfor %}
      {% endfor %}
      {% endif %}
      fp_passwordstore: {{ fp_passwordstore }}
      fp_passwordstore_install: {{ fp_passwordstore_install }}
      fp_passwordstore_debug: {{ fp_passwordstore_debug }}
      fp_passwordstore_backup: {{ fp_passwordstore_backup }}
      fp_passwordstore_create: {{ fp_passwordstore_create }}
      fp_passwordstore_length: {{ fp_passwordstore_length }}
      fp_passwordstore_nosymbols: {{ fp_passwordstore_nosymbols }}
      fp_passwordstore_overwrite: {{ fp_passwordstore_overwrite }}
      fp_passwordstore_passwordstore: {{ fp_passwordstore_passwordstore }}
      fp_passwordstore_returnall: {{ fp_passwordstore_returnall }}
      fp_passwordstore_subkey: {{ fp_passwordstore_subkey }}
      fp_passwordstore_idempotent_password_hash: {{ fp_passwordstore_idempotent_password_hash }}
      fp_passwordstore_hostname_var: {{ fp_passwordstore_hostname_var }}
      fp_passwordstore_packages:
        {{ fp_passwordstore_packages | to_nice_yaml(indent=2) | indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: Passwordstore
  when: fp_passwordstore | bool
  tags: fp_passwords_passwordstore
  block:

    - name: "passwords: Passwordstore: Install packages"
      when: fp_passwordstore_install | bool
      ansible.builtin.include_tasks:
        file: packages-install.yml
      loop:
        - "{{ fp_passwordstore_packages }}"
        - "{{ fp_gpg_packages }}"
        - "{{ fp_gpg_packages_extra }}"
      vars:
        my_delegate_to_localhost: true
      run_once: true

    - name: "passwords: Passwordstore: Retrieve, create, or update userpass"
      ansible.builtin.include_role:
        name: vbotka.ansible_lib
        tasks_from: al_pws_user_host.yml
      vars:
        al_pws_debug: "{{ fp_passwordstore_debug }}"
        al_pws_backup: "{{ fp_passwordstore_backup }}"
        al_pws_create: "{{ fp_passwordstore_create }}"
        al_pws_length: "{{ fp_passwordstore_length }}"
        al_pws_nosymbols: "{{ fp_passwordstore_nosymbols }}"
        al_pws_overwrite: "{{ fp_passwordstore_overwrite }}"
        al_pws_passwordstore: "{{ fp_passwordstore_passwordstore }}"
        al_pws_returnall: "{{ fp_passwordstore_returnall }}"
        al_pws_subkey: "{{ fp_passwordstore_subkey }}"
        al_pws_idempotent_password_hash: "{{ fp_passwordstore_idempotent_password_hash }}"
        al_pws_hostname_var: "{{ fp_passwordstore_hostname_var }}"
        al_pws_query: "{{ fp_users_conf }}"
      register: result

    - name: "passwords: Passwordstore: Create empty list my_passwords"
      ansible.builtin.set_fact:
        my_passwords: []  # noqa no-log-password

    - name: "passwords: Passwordstore: Create my_passwords"
      ansible.builtin.set_fact:
        my_passwords: "{{ my_passwords +
                          [item | dict2items |
                          rejectattr('key', 'equalto', 'userpass') |
                          list | items2dict |
                          combine({'update_password': fp_passwords_update_password})] }}"
      loop: "{{ al_pws_query_result }}"
      loop_control:
        label: "{{ item.name }}"
      no_log: "{{ not fp_passwords_debug_classified | bool }}"

    - name: "passwords: Passwordstore: Debug my_passwords"
      ansible.builtin.debug:
        var: my_passwords
      when: fp_passwords_debug_classified | bool

    - name: "passwords:  Passwordstore: Include users"
      ansible.builtin.include_tasks:
        file: users.yml
      vars:
        fp_users: "{{ my_passwords }}"
        fp_users_debug: "{{ fp_passwords_debug | bool }}"
        fp_users_debug_classified: "{{ fp_passwords_debug_classified | bool }}"

  rescue:

    - name: "passwords: Passwordstore: Debug failed"
      ansible.builtin.debug:
        msg: |
          [ERR] Passwordstore failed.
          {{ ansible_failed_task | to_nice_yaml(indent=2) | indent(2) }}
          {{ ansible_failed_result | to_nice_yaml(indent=2) | indent(2) }}
      when: fp_passwords_debug_classified | bool

    - name: "passwords: Passwordstore: failed"
      ansible.builtin.fail:
        msg: "[ERR] Passwordstore failed."
      when: not fp_passwords_fail_gracefully | bool

    - name: "passwords: Passwordstore: end host"
      ansible.builtin.meta: end_host

#  EOF
...
