- name: Configure the role vbotka.freebsd_postinstall
  hosts: localhost

  vars:

    tags_path: defaults/main/sanity_tags.yml
    nfs_services_path: defaults/main/nfs_services.yml
    nfsd_services_path: defaults/main/nfsd_services.yml

  tasks:

    - name: Confirm that you know what you are doing.
      ansible.builtin.assert:
        that: i_know_what_i_am_doing | d(false) | bool
        fail_msg: Confirm that you know what you are doing.

    - name: Create list of all tags fp_sanity_tags in {{ tags_path }}
      when: fp_create_sanity_tags | d(false) | bool
      block:

        - name: "Find tasks files"
          ansible.builtin.find:
            path: tasks
            recurse: true
            patterns: '*.yml'
          register: out
          check_mode: false

        - name: "Create list of tasks"
          ansible.builtin.set_fact:
            _tasks: "{{ _tasks + lookup('file', item) | from_yaml_all }}"
          loop: "{{ out.files | map(attribute='path') }}"
          vars:
            _tasks: []

        - name: "Debug list of tasks debug={{ debug | d(false) }}"
          ansible.builtin.debug:
            msg: |
              {{ _tasks | to_yaml(indent=2) | indent(2) }}
          when: debug | d(false) | bool

        - name: "Debug lists of tags debug={{ debug | d(false) }}" # noqa: jinja[invalid]
          ansible.builtin.debug:
            msg: |
              _tags_tasks: {{ _tags_tasks | to_yaml(indent=2) | indent(2) }}"
              _tags_block: {{ _tags_block | to_yaml(indent=2) | indent(2) }}"
          vars:
            _tags_tasks: "{{ _tasks | json_query('[].tags') | flatten | unique | sort }}"
            _tags_block: "{{ _tasks | json_query('[].block[].tags') | flatten | unique | sort }}"
          when: debug | d(false) | bool

        - name: "Create list of tags" # noqa: jinja[invalid]
          ansible.builtin.set_fact:
            _tags: "{{ (_tags_tasks + _tags_block + ['all']) |
                       difference(['always', 'never']) |
                       unique | sort }}"
          loop: "{{ out.files | map(attribute='path') }}"
          vars:
            _tags_tasks: "{{ _tasks | json_query('[].tags') | flatten | unique | sort }}"
            _tags_block: "{{ _tasks | json_query('[].block[].tags') | flatten | unique | sort }}"

        - name: "Debug list of tags debug={{ debug | d(false) }}"
          ansible.builtin.debug:
            msg: |
              no_of_tags: {{ _tags | length }}
              _tags: {{ _tags | to_yaml(indent=2) | indent(2) }}
          when: debug | d(false) | bool

        - name: "Create {{ tags_path }}"
          ansible.builtin.copy:
            dest: "{{ tags_path }}"
            mode: "0664"
            backup: true
            content: |
              ---
              # Generated by .configure.yml

              fp_sanity_tags:
                {{ _tags | to_nice_yaml(indent=2) | indent(2) }}

    - name: Create handlers/main.yml
      when: fp_create_handlers_main | d(false) | bool
      block:

        - name: "Find tasks files"
          ansible.builtin.find:
            path: handlers
            patterns: '*.yml'
          register: out
          check_mode: false

        - name: "Debug list of handlers debug={{ debug | d(false) }}"
          ansible.builtin.debug:
            msg: |
              _handlers: |
                {{ _handlers | to_nice_yaml(indent=2) | indent(2) }}
          vars:
            _handlers: "{{ out.files | map(attribute='path') | map('basename') |
                           difference(['main.yml']) | sort }}"
          when: debug | d(false) | bool

        - name: "Create handlers/main.yml"
          ansible.builtin.copy:
            dest: handlers/main.yml
            mode: "0664"
            backup: true
            content: |
              ---
              # Generated by .configure.yml

              # handlers for freebsd_postinstall
              {% for handler in _handlers %}
              - name: Import {{ handler }}
                ansible.builtin.import_tasks: {{ handler }}
              {% endfor %}
              # EOF
          vars:
            _handlers: "{{ out.files | map(attribute='path') | map('basename') |
                           difference(['main.yml']) | sort }}"

    - name: Create lists fp_nfs_services_enable and disable in {{ nfs_services_path }}
      when: fp_create_nfs_services | d(false) | bool
      vars:
        nfs_services: {nfsclient: nfs, lockd: rpc_lockd, statd: rpc_statd}
        _start: "{{ '{{' }}"
        _stop: "{{ '}}' }}"
      block:

        - name: "Create {{ nfs_services_path }}"
          ansible.builtin.copy:
            dest: "{{ nfs_services_path }}"
            mode: "0664"
            backup: true
            content: |
              ---
              # Generated by .configure.yml

              fp_nfs_services_enable:
              {% for service, var in nfs_services.items() %}
                - label: "nfs: Enable and start {{ service }}"
                  conf: "{{ _start }} fp_{{ var }}_enable_rcconf {{ _stop }}"
                  when: "{{ _start }} fp_{{ var }}_enable | bool {{ _stop }}"
                  notify: "{{ _start }} fp_nfs_handlers.{{ service }} {{ _stop }}"
              {% endfor %}

              fp_nfs_services_disable:
              {% for service, var in nfs_services.items() %}
                - label: "nfs: Disable and stop {{ service }}"
                  conf: "{{ _start }} fp_{{ var }}_disable_rcconf {{ _stop }}"
                  when: "{{ _start }} not fp_{{ var }}_enable | bool {{ _stop }}"
                  notify: disable and stop {{ service }}
              {% endfor %}

    - name: Create lists fp_nfsd_services_enable and disable in {{ nfsd_services_path }}
      when: fp_create_nfsd_services | d(false) | bool
      vars:
        nfsd_services: {nfsd: nfsd, mountd: mountd, rpcbind: rpcbind, lockd: rpc_lockd, statd: rpc_statd}
        _start: "{{ '{{' }}"
        _stop: "{{ '}}' }}"
      block:

        - name: "Create {{ nfsd_services_path }}"
          ansible.builtin.copy:
            dest: "{{ nfsd_services_path }}"
            mode: "0664"
            backup: true
            content: |
              ---
              # Generated by .configure.yml

              fp_nfsd_services_enable:
              {% for service, var in nfsd_services.items() %}
                - label: "nfsd: Enable and start {{ service }}"
                  conf: "{{ _start }} fp_{{ var }}_enable_rcconf {{ _stop }}"
                  when: "{{ _start }} fp_{{ var }}_enable | bool {{ _stop }}"
                  notify: "{{ _start }} fp_nfsd_handlers.{{ service }} {{ _stop }}"
              {% endfor %}

              fp_nfsd_services_disable:
              {% for service, var in nfsd_services.items() %}
                - label: "nfsd: Disable and stop {{ service }}"
                  conf: "{{ _start }} fp_{{ var }}_disable_rcconf {{ _stop }}"
                  when: "{{ _start }} not fp_{{ var }}_enable | bool {{ _stop }}"
                  notify: disable and stop {{ service }}
              {% endfor %}

# EOF
